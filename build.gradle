import javax.swing.JButton
import javax.swing.JFrame
import javax.swing.JOptionPane
import javax.swing.JPanel
import javax.swing.JPasswordField
import javax.swing.WindowConstants
import java.awt.Dimension
import java.awt.GridLayout
import java.awt.event.ActionEvent
import java.awt.event.ActionListener
import java.awt.event.KeyEvent
import java.awt.event.KeyListener
import java.util.concurrent.CountDownLatch

buildscript {
    repositories {
        jcenter()
        maven { url = "http://files.minecraftforge.net/maven" }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:2.3-SNAPSHOT'
    }
}
plugins {
    id 'net.minecrell.licenser' version '0.4.1'
}
apply plugin: 'net.minecraftforge.gradle.forge'
//Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.


version = "1.0.0"
group = "ichttt.mods.moresoundconfig" // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = "moresoundconfig"
def archiveGroup = "ichttt"

sourceCompatibility = targetCompatibility = '1.8' // Need this here so eclipse task generates correctly.
compileJava {
    sourceCompatibility = targetCompatibility = '1.8'
}

license {
    include '**/ichttt/mods/**/*.java'
    header = file('LICENSE_HEADER')
}

minecraft {
    version = "1.12.2-14.23.5.2768"
    runDir = "run"
    
    // the mappings can be changed at any time, and must be in the following format.
    // snapshot_YYYYMMDD   snapshot are built nightly.
    // stable_#            stables are built at the discretion of the MCP team.
    // Use non-default mappings at your own risk. they may not always work.
    // simply re-run your setup task after changing the mappings to update your workspace.
    mappings = "stable_39"
    // makeObfSourceJar = false // an Srg named sources jar is made by default. uncomment this to disable.
}

dependencies {

}

//Check if signing is enabled when building
if (project.gradle.startParameter.taskNames.contains("build") && !project.hasProperty('betaBuild') && (!project.hasProperty('keyStore') || !project.hasProperty('storeAlias'))) {
    throw new IllegalArgumentException("Building without signing is not allowed. Please specify the keyStore and storeAlias property!")
} else if (project.hasProperty('betaBuild')) {
    for (int i = 0; i < 5; i++)
        project.getLogger().log(LogLevel.WARN, "!!!Building beta version - Not suited for distribution!!!")
}

def signPass
task setupKeys() {
    onlyIf {
        project.hasProperty('keyStore')
    }
    if (project.hasProperty('keyStore')) {
        def gui = new SimplePasswordQuery()
        gui.latch.await()
        signPass = gui.getPasswordAndDiscard()
    }
}

//Everything from here til the marker is inspired from ImmersiveEngineering. Many thanks!
reobf {
    coreJar {mappingType = 'SEARGE'}
}

task coreJar(type: Jar) {
    // Copy all compiled files and resources from the source set to the JAR
    // If you have additional source sets, add the same logic here
    from(sourceSets.main.output) {
        // Don't include the coremod in the main mod
        // If you have more coremod-related packages that aren't nested in the main one, add exclusions for them
        include 'ichttt/mods/moresoundconfig/asm/**'
    }
    manifest {
        attributes "FMLCorePlugin": "ichttt.mods.moresoundconfig.asm.MSCCoreMod"
        attributes 'Maven-Artifact': archiveGroup+':'+archivesBaseName+'-core:'+version
    }
    // Add a classifier to the JAR ('-core' at the end of the file name)
    // Distinguishes the mod JAR from the shipped one
    classifier 'core'
    group = 'build'
}

task signCoreJar(type: SignJar) {
    onlyIf { // Skip the task if our secret data isn't available
        project.hasProperty('keyStore')
    }
    dependsOn reobfCoreJar
    if (project.hasProperty('keyStore')) { // This needs to be a path to the keystore file
        keyStore = project.keyStore
        alias = project.storeAlias
        storePass = signPass
        keyPass = signPass
        inputFile = coreJar.archivePath
        outputFile = coreJar.archivePath
    }
}

task signMainJar(type: SignJar) {
    onlyIf { // Skip the task if our secret data isn't available
        project.hasProperty('keyStore')
    }
    dependsOn reobfJar
    if (project.hasProperty('keyStore')) { // This needs to be a path to the keystore file
        keyStore = project.keyStore
        alias = project.storeAlias
        storePass = signPass
        keyPass = signPass
        inputFile = jar.archivePath
        outputFile = jar.archivePath
    }
}

signMainJar.dependsOn setupKeys
signCoreJar.dependsOn setupKeys
build.dependsOn signMainJar
jar.dependsOn signCoreJar

def libPrefix = 'META-INF/libraries'
jar {
    manifest {
        attributes 'ContainedDeps': libPrefix+'/'+coreJar.archivePath.name
        attributes 'FMLAT' : 'moresoundconfig_at.cfg'
        attributes 'Maven-Artifact': archiveGroup+':'+archivesBaseName+':'+version
    }
    exclude 'ichttt/mods/moresoundconfig/asm/**'
    // Add the output of the mod JAR task to the main JAR for later extraction
    from(coreJar.archivePath.absolutePath) {
        include '*' // Due to the way Gradle's copy tasks work, we need this line for the JAR to get added
        into libPrefix
    }
}
//IE inspired stuff END

processResources {
    // this will ensure that this task is redone when the versions change.
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'
                
        // replace version and mcversion
        expand 'version':project.version, 'mcversion':project.minecraft.version
    }
        
    // copy everything else except the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}

//Copied from FGLW. Therefor ignore all groovy warnings
@SuppressWarnings("all")
class SimplePasswordQuery implements ActionListener, KeyListener {
    private final CountDownLatch latch = new CountDownLatch(1);
    private final JFrame frame = new JFrame("KeySigner Password");
    private final JPanel login = new JPanel(new GridLayout(2, 1));
    private String password;
    private JPasswordField field = new JPasswordField();

    public SimplePasswordQuery() {
        frame.setContentPane(login);
        field.addKeyListener(this);
        login.add(field);
        JButton okBtn = new JButton("OK");
        okBtn.addActionListener(this);
        login.add(okBtn);
        frame.setMinimumSize(new Dimension(320, 200));
        frame.setVisible(true);
        frame.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
    }

    public CountDownLatch getLatch() {
        return latch;
    }

    public String getPasswordAndDiscard() {
        String s = password;
        frame.dispose();
        login.removeAll();
        password = null;
        return s;
    }

    private void checkPW() {
        password = new String(field.getPassword());
        if (!password.equals(""))
            latch.countDown();
        else
            JOptionPane.showMessageDialog(frame, "No password is not an option!")
    }

    @Override
    public void actionPerformed(ActionEvent e) {
        checkPW();
    }

    @Override
    public void keyPressed(KeyEvent e) {
        if (e.getKeyCode() == KeyEvent.VK_ENTER)
            checkPW();
    }

    @Override public void keyReleased(KeyEvent e) {}
    @Override public void keyTyped(KeyEvent e) {}
}